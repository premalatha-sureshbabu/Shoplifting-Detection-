## Dataset 
```
import zipfile
import os

# Path to uploaded ZIP file
dataset_zip = "/content/shop.v2i.yolov8.zip"  # Ensure correct path

# Extract location
extract_path = "/content/dataset"
os.makedirs(extract_path, exist_ok=True)

# Extract dataset
with zipfile.ZipFile(dataset_zip, "r") as zip_ref:
    zip_ref.extractall(extract_path)

print(f"✅ Dataset extracted to: {extract_path}")
import os
print(os.listdir(extract_path))


## Train
import cv2
import os

# Set paths
image_folder = "/content/dataset/train/images"  # Update if needed
output_video = "/content/shoplifting_dataset_video.mp4"

# Get sorted list of images
images = sorted([img for img in os.listdir(image_folder) if img.endswith(".jpg")])

if not images:
    print("❌ No images found! Check dataset path.")
else:
    # Read first image to get dimensions
    first_frame = cv2.imread(os.path.join(image_folder, images[0]))
    height, width, _ = first_frame.shape

    # Set up video writer
    fourcc = cv2.VideoWriter_fourcc(*"mp4v")
    video = cv2.VideoWriter(output_video, fourcc, 5, (width, height))  # FPS = 5

    # Add images to video
    for img in images:
        frame = cv2.imread(os.path.join(image_folder, img))
        video.write(frame)

    video.release()
    print(f"✅ Video created: {output_video}")


## YOLO Model
from ultralytics import YOLO

# Load YOLOv8 model
model = YOLO("yolov8n.pt")  # Use YOLOv8 nano

# Train the model
model.train(data="/content/dataset/data.yaml", epochs=100, batch=8, imgsz=640)

print("✅ Training Complete!")

## Training video
import cv2

# Load trained YOLO model
model = YOLO("/content/runs/detect/train/weights")

# Set paths
video_path = "/content/shoplifting_dataset_video.mp4"
output_path = "/content/shoplifting_detection_output.mp4"

# Open video file
cap = cv2.VideoCapture(video_path)

## Install Python
import cv2

# Load trained YOLO model
model = YOLO("/content/runs/detect/train/weights")

# Set paths
video_path = "/content/shoplifting_dataset_video.mp4"
output_path = "/content/shoplifting_detection_output.mp4"

# Open video file
cap = cv2.VideoCapture(video_path)
import locale
locale.getpreferredencoding = lambda: "UTF-8"
!pip install ultralytics opencv-python

## Train Model
import cv2

# Load trained YOLO model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Set paths
video_path = "/content/shoplifting_dataset_video.mp4"
output_path = "/content/shoplifting_detection_output.mp4"

# Open video file
cap = cv2.VideoCapture(video_path)

# Get video properties
fourcc = cv2.VideoWriter_fourcc(*"mp4v")
fps = int(cap.get(cv2.CAP_PROP_FPS))
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Create VideoWriter
out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Run YOLO detection
    results = model(frame)

    # Draw bounding boxes
    for r in results:
        for box in r.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            label = r.names[int(box.cls)]
            confidence = box.conf[0].item()

            if confidence > 0.5:  # Confidence threshold
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f"{label} {confidence:.2f}", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Write frame to output video
    out.write(frame)

cap.release()
out.release()

print(f"✅ Shoplifting detection complete! Output saved at: {output_path}")

## Detecting output
from google.colab.patches import cv2_imshow  # Import necessary function
import os
import cv2
from ultralytics import YOLO

# Load trained YOLO model
model = YOLO("/content/runs/detect/train/weights/best.pt")  # Update to your model path

# Video path
video_path = "/content/shoplifting_dataset_video.mp4"  # Update to your video path

# Check if video file exists
if not os.path.exists(video_path):
    print("❌ Video file not found!")
else:
    cap = cv2.VideoCapture(video_path)

    if not cap.isOpened():
        print("❌ Failed to open video!")
    else:
        # Get FPS and frame dimensions
        fps = cap.get(cv2.CAP_PROP_FPS)
        frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

        # Set up VideoWriter to save the output
        output_path = "/content/shoplifting_detection_output.mp4"
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Use mp4v codec
        out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break

            # Run detection with adjusted confidence threshold and NMS
            results = model(frame, conf=0.5)  # Adjust confidence threshold as needed

            # Debug: Check number of detections
            print(f"Detected {len(results[0].boxes)} objects in this frame.")

            # Plot bounding boxes
            for box in results[0].boxes:
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                label = results[0].names[int(box.cls)]
                confidence = box.conf[0].item()

                if confidence > 0.5:  # Confidence threshold
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    cv2.putText(frame, f"{label} {confidence:.2f}", (x1, y1 - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Write the annotated frame to output video
            out.write(frame)

            # Display annotated frame using cv2_imshow()
            cv2_imshow(frame)

            # Option to break by pressing 'q'
            if cv2.waitKey(1) & 0xFF == ord("q"):
                break

        # Release resources
        cap.release()
        out.release()
        cv2.destroyAllWindows()

        print(f"✅ Output video saved at: {output_path}")

```
